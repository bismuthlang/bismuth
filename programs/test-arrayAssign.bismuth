extern func printf(...) : int;

# Note: The issue w/ lack of channel names is that of secondary notation

# proc printInt5Array(str name, int [5] array) {
define printInt5Array :: c : Channel<+str; +u32[5]> = {
  str name := c.recv(); 
  u32 [5] array := c.recv(); 

  var i := 0; 

  while i < array.length {


    printf("%s[%d] = %d", name, i, ((u32 + Unit) a) : u32 {
      match a 
        | u32 i => return i; 
        | Unit u => return -1; 
      }(array[i])
    );

    if(i + 1 < array.length) {
      printf(", ");
    }

    i := i + 1; 
  }

  printf("\n");
}


# proc addOneToInt5(str name, u32 [5] array) {
define addOneToInt5 :: c : Channel<+str; +u32[5]> = {
  str name := c.recv(); 
  u32[5] array := c.recv(); 

  printf("In AddOne\n");
  # printInt5Array(name, array);
  syncExec(printInt5Array, name, array);

  {
    var i := 0; 

    while i < array.length {
      # array[i] := array[i] + 1; # FIXME: SEEMS OFF NOT BEING ABLE TO DO THIS!
      array[i] := (u32[5] a, u32 idx) : u32 {
                      match a[idx]
                        | Unit u => return -1; 
                        | u32 i => return i + 1; 
                  }(array, i);

      i := i + 1; 
    }
  }

  # printInt5Array(name, array);
  syncExec(printInt5Array, name, array);
  printf("Exiting add one!\n");
}

define func syncExec (Program<+str;+u32[5]> prog, str s, u32[5] a) : u32
{
  Channel<-str;-u32[5]> chan := exec prog; 
  chan.send(s)
  chan.send(a)

  return -1; 
}

define program :: c : Channel<-int> = {
  u32 [5] a; 

  {
    var i := 0; 

    while i < a.length {
      a[i] := i; 
      i := i + 1; 
    }
  }

  # printInt5Array("a", a);
  syncExec(printInt5Array, "a", a);

  u32 [5] b; 

  
  {
    var i := 0; 

    while i < b.length {
      b[i] := 0; 

      i := i + 1; 
    }
  }

  # printInt5Array("b", b);
  syncExec(printInt5Array, "b", b);

  printf("------------------------------\n");

  # printInt5Array("a", a);
  syncExec(printInt5Array, "a", a);
  # printInt5Array("b", b);
  syncExec(printInt5Array, "b", b);

  printf("------------------------------\n");

  b := a; 

  # printInt5Array("a", a);
  syncExec(printInt5Array, "a", a);
  # printInt5Array("b", b);
  syncExec(printInt5Array, "b", b);

  printf("------------------------------\n");


  a[3] := 1000; 
  b[0] := 9999;


  # printInt5Array("a", a);
  syncExec(printInt5Array, "a", a);
  # printInt5Array("b", b);
  syncExec(printInt5Array, "b", b);

  printf("------------------------------\n");

  # addOneToInt5("a", a);
  syncExec(addOneToInt5, "a", a);
  # printInt5Array("a", a);
  syncExec(printInt5Array, "a", a);
  
  printf("------------------------------\n");

  # return 0; 
  c.send(0)
}