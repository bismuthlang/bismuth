extern func printf(str s, ...) : int;

define program :: c : Channel<-int> {
    var addStream := exec BinaryCounter;
    addStream.send(exec Num7);
    addStream.send(exec Num5);

    accept(addStream) {
        printf("%s",(boolean b) : str {
            if b { return "1"; }
            return "0";
        }(addStream.recv()));
    }
    printf("\n");

    c.send(0); 
}

define func XOR (boolean a, boolean b) : boolean {
    return (a && !b) || (!a && b);
}

define BinaryCounter :: c : Channel<+Channel<!+boolean>; +Channel<!+boolean>;?-boolean> {
    var i1 := c.recv(), i2 := c.recv();

    boolean carry := false; 
    # Only one or the other of the accepts will end up running
    accept(i1) {
        boolean val := i1.recv(); 

        boolean looped2, val2 := false; 
        acceptWhile(i2, !looped2) {val2 := i2.recv(); looped2 := true;}

        boolean xor := XOR(val, val2); 
        boolean sum := XOR(xor, carry); 
        boolean car := (xor && carry) || (val && val2);
        more(c);
        c.send(sum);
        carry := car; 
    }
    accept(i2) {
        boolean val := i2.recv(); 
        more(c); 
        c.send(XOR(val, carry));
        carry := val && carry; 
    }
    if carry {
        more(c); 
        c.send(carry);
    }

    weaken(c);  
}

define Num7 :: c : Channel<?-boolean> {
    more(c); 
    c.send(true); 
    more(c); 
    c.send(true); 
    more(c)
    c.send(true); 
    weaken(c); 
}

define Num5 :: c : Channel<?-boolean> {
    more(c); 
    c.send(true); 
    more(c); 
    c.send(false); 
    more(c)
    c.send(true); 
    weaken(c); 
}