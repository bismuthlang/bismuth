extern func printf(str s, ...) : int;

define enum lambdaOp {
    str, int -> str,
    str -> str
}


define enum a {
    int, 
    boolean,
    str,
    #(str, int -> str + str -> str) 
    lambdaOp
}

define program :: c : Channel<-int> = {
    var fn := (str msg, int times) : str {
        while times > 0 {
            printf("msg=%s\n", msg);
            times := times -1; 
        }
        return msg; 
    };

    
    var t2; 

    t2 := fn; 

    lambdaOp op;
    op := fn; 
    
    match op {
        str, int -> str fn => fn("Hello", 2);
        str -> str fn => fn("Goodbye");
    }


    a obscured;
    obscured := op; 

    match obscured {
        int i => printf("Integer: %u\n", i);
        boolean b => if b { printf("Boolean: true\n"); } else { printf("Boolean: false\n"); }
        str s => printf("String: %s\n", s);
        lambdaOp s => {
            match s {
                str, int -> str fn => fn("Repeat 2 times!", 2);
                str -> str fn => fn("Plain old print!");
            }
        }
    }
    
    c.send(0)
}