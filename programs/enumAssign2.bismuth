extern func printf(str s, ...) -> int;

enum lambdaOp {
    str, int -> str,
    str -> str
}


enum a {
    int, 
    boolean,
    str,
    #(str, int -> str + str -> str) 
    lambdaOp
}

# str, int -> str func getPrintLambda() {
prog getPrintLambda :: c : -str,int -> str = {
    str, int -> str fn := (str msg, int times) -> str {
        while times > 0 {
            printf("msg=%s\n", msg);
            times := times -1; 
        }
        return msg; 
    };

    # return fn;
    c.send(fn)
}

# a func aFromLambdaOp(lambdaOp op) {
prog aFromLambdaOp :: c : +lambdaOp;-a = {
    lambdaOp op := c.recv();
    a obscured := op; 

    # return obscured; 
    c.send(obscured)
}

# Unit -> int func getMain() {
prog getMain :: c : -Program<-int> = {
    # int func main(Unit u) {
    prog main :: c : -int = {
        var t2; 

        Channel<+str,int->str> chan := exec getPrintLambda;
        t2 := chan.recv();
        # t2 := getPrintLambda(); 

        lambdaOp op;
        Channel<+str,int->str> chan2 := exec getPrintLambda;
        # op := getPrintLambda(); 
        op := chan2.recv();
        
        match op {
            str, int -> str fn => fn("Hello", 2);
            str -> str fn => fn("Goodbye");
        }


        a obscured;
        Channel<-lambdaOp;+a> chan3 := exec aFromLambdaOp;
        chan3.send(op)
        # obscured := aFromLambdaOp(op); 
        obscured := chan3.recv();

        match obscured {
            int i => printf("Integer: %u\n", i);
            boolean b => if b { printf("Boolean: true\n"); } else { printf("Boolean: false\n"); }
            str s => printf("String: %s\n", s);
            lambdaOp s => {
                match s {
                    str, int -> str fn => fn("Repeat 2 times!", 2);
                    str -> str fn => fn("Plain old print!");
                }
            }
        }
        # return 0; 
        c.send(0)
    }

    # return main; 
    c.send(main)
}

prog program :: c : -int = {
    Channel<+Program<-int>> io := exec getMain; 
    Program<-int> mainProg := io.recv();
    Channel<+int> io2 := exec mainProg; 
    int i := io2.recv();

    c.send(i)
}