extern func printf(str s, ...) : int;

define struct Empty {}
define struct Value {int v;}
define enum OptVal {Empty, Value}

define Database :: c : Channel<
                        !ExternalChoice<
                              +int;-OptVal,
                              +int;+Value,
                              +int;InternalChoice<
                                       -Value;+Value,
                                       +Value>>> = {

  Value[10] data; 

  define func Lookup(Value[10] d, int k) : OptVal {
     if k < 0 | k >= 10 { return Empty::init(); }
     return d[k]; 
  }

  define func PrintDatabase(Value[10] data) {
      var i := 0; 
      while i < data.length {
        var v := data[i]; 
        printf("%u, ", v.v);
        i := i + 1; 
      }
      printf("\n");
      return;
  }

  printf("Initial Database State:\n");
  PrintDatabase(data); 

  accept(c) {
    offer c 
      | +int;-OptVal => { 
            c.send(Lookup(data, c.recv()))
        }
      | +int;+Value => {
            var key := c.recv(); 
            data[key] := c.recv(); 
        }
      | +int;InternalChoice<-Value;+Value,+Value> => {
          var k := c.recv();
          c[+Value]
          data[k] := c.recv();
        }
    printf("Database Updated: \n");
    PrintDatabase(data); 
  }
}

define program :: c : Channel<-int> = {
    var db := exec Database;
    var rqs := exec requests;

    var setRq := exec writeRequest; 
   


    accept(rqs) {
      
      acceptWhile(setRq, setRq.is_present()) {
        more(db); 
        db[-int;-Value]
        db.send(setRq.recv())
        db.send(setRq.recv())
      }

      more(db)
      offer rqs 
        | +int;-OptVal => { 
            db[-int;+OptVal] 
            db.send(rqs.recv())  
            var a := db.recv();
            rqs.send(a) 
          } 
        | +int;+Value => { db[-int;-Value] db.send(rqs.recv()) db.send(rqs.recv()) }
        | +int;InternalChoice<-Value;+Value, +Value> => { 
            printf("72\n"); 
            db[-int;ExternalChoice<+Value;-Value, -Value>] 
            db.send(rqs.recv())
            offer db 
                |   +Value;-Value => { rqs[-Value;+Value] rqs.send(db.recv()) db.send(rqs.recv())}
                |   -Value => { rqs[+Value] db.send(rqs.recv()) }
          }
  
    }
 

    accept(setRq) {
      more(db); 
      db[-int;-Value]
      db.send(setRq.recv())
      db.send(setRq.recv())
    }

    weaken(db)
    c.send(0);
}


define requests :: c : Channel<
                        ?InternalChoice<
                              -int;+OptVal,
                              -int;-Value,
                              -int;ExternalChoice<
                                       +Value;-Value,
                                       -Value>>> = {

    
    more(c)
    c[-int;+OptVal]
    c.send(4)
    var opt := c.recv(); 

    printf("Read Request for 4 got: ");

    match opt
      | Empty e => { printf("empty\n"); }
      | Value v => { printf("%u\n", v.v); }

    more(c)
    c[-int;+OptVal]
    c.send(20)
    opt := c.recv(); 

    printf("Read Request for 20 got: ");

    match opt
      | Empty e => { printf("empty\n"); }
      | Value v => { printf("%u\n", v.v); }

    weaken(c)
}

define writeRequest :: c : Channel<?(-int;-Value)> = {
    
    more(c)
    c.send(4)
    c.send(Value::init(2))
    
    weaken(c)
}