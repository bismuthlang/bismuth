extern func printf(str s, ...) -> int;

struct Value {int v;}
enum OptVal {Unit, Value}

prog Database :: c : !ExternalChoice<
                              +int;-OptVal,
                              +int;+Value,
                              +int;InternalChoice<
                                       -Value;+Value,
                                       +Value>> = {

  Value[10] data; 

  func PrintDatabase(Value[10] data) {
      var i := 0; 
      while i < data.length {
        match data[i]
          | Value v => printf("%u, ", v.v);
          | Unit u => printf("*, ");
        i := i + 1; 
      }
      printf("\n");
      return;
  }

  printf("Initial Database State:\n");
  PrintDatabase(data); 

  accept(c) {
    offer c 
      | +int;-OptVal => { 
          c.send(data[c.recv()]);
        }
      | +int;+Value => {
            data[c.recv()] := c.recv();
        }
      | +int;InternalChoice<-Value;+Value,+Value> => {
          var k := c.recv();
          c[+Value]
          data[k] := c.recv();
        }
    printf("Database Updated: \n");
    PrintDatabase(data); 
  }
}

prog program :: c : -int = {
    var db := exec Database;
    var rqs := exec requests;
    var setRq := exec writeRequest; 


    accept(rqs) {
      acceptIf(setRq, setRq.is_present()) {
        printf("Acceptif Present!\n");
        more(db); 
        db[-int;-Value]
        db.send(setRq.recv())
        db.send(setRq.recv())
      }
      else 
      {
        printf("AcceptIf Not Present!\n");
      }
   
      more(db)
      offer rqs 
        | +int;-OptVal => { 
            db[-int;+OptVal] 
            db.send(rqs.recv())  
            var a := db.recv();
            rqs.send(a) 
          } 
        | +int;+Value => { db[-int;-Value] db.send(rqs.recv()) db.send(rqs.recv()) }
        | +int;InternalChoice<-Value;+Value, +Value> => { 
            printf("72\n"); 
            db[-int;ExternalChoice<+Value;-Value, -Value>] 
            db.send(rqs.recv())
            offer db 
                |   +Value;-Value => { rqs[-Value;+Value] rqs.send(db.recv()) db.send(rqs.recv())}
                |   -Value => { rqs[+Value] db.send(rqs.recv()) }
          }
  
    }
 

    accept(setRq) {
      more(db); 
      db[-int;-Value]
      db.send(setRq.recv())
      db.send(setRq.recv())
    }

    weaken(db)
    c.send(0);
}


prog requests :: c : ?InternalChoice<
                              -int;+OptVal,
                              -int;-Value,
                              -int;ExternalChoice<
                                       +Value;-Value,
                                       -Value>> = {

    
    more(c)
    c[-int;+OptVal]
    c.send(4)
    var opt := c.recv(); 

    printf("Read Request for 4 got: ");

    match opt
      | Unit e => { printf("empty\n"); }
      | Value v => { printf("%u\n", v.v); }

    more(c)
    c[-int;+OptVal]
    c.send(20)
    opt := c.recv(); 

    printf("Read Request for 20 got: ");

    match opt
      | Unit e => { printf("empty\n"); }
      | Value v => { printf("%u\n", v.v); }

    weaken(c)
}

prog writeRequest :: c : ?(-int;-Value) = {
    more(c)
    c.send(4)
    c.send(Value::init(2))
    
    weaken(c)
}