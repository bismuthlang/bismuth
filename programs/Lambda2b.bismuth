extern func printf(...) -> int; 

prog program :: c : -int = {
    # int func foo(int x) {
    prog foo :: c : +int;-int = {
        # int func foo(int x) {
        prog foo :: c : +int;-int = {
            int x := c.recv(); 
            printf("FOO_I: %u\n", x);
            c.send(x)
            # return x; 
        }
        # return foo(x); 
        Channel<-int;+int> io := exec foo; 

        int x := c.recv(); 
        io.send(x)
        int z := io.recv();

        c.send(z)
    }

    var ref := foo; 

    # ref(10); 
    Channel<-int;+int> t1 := exec ref; 
    t1.send(10)
    # foo(11); 
    Channel<-int;+int> t2 := exec foo;
    t2.send(11)


    int j := t1.recv(), k := t2.recv();

    Channel<-int;+int> t3 := exec ref; 
    t3.send(1)
    int i := t3.recv();
    # printf("ref (:= foo(1)) = %u\n", ref(1));
    printf("ref (:= foo(1)) = %u\n", i);

    {
        # int func foo(int z) {
        prog foo :: c : +int;-int = {
            int z := c.recv();
            printf("Foo2: %u\n", z);
            # return z; 
            c.send(z)
        }

        Program<+int;-int> ref := foo; 

        # ref(10); 
        Channel<-int;+int> t1 := exec ref; 
        t1.send(10)
        # foo(11); 
        Channel<-int;+int> t2 := exec foo;
        t2.send(11)

        Channel<-int;+int> t3 := exec ref; 
        t3.send(1)

        int i := t3.recv();

        # printf("ref (:= foo(1)) = %u\n", ref(1));
        printf("ref (:= foo(1)) = %u\n", i);

        int j := t1.recv(), k := t2.recv();
    }

    # return 0;
    c.send(0)
}