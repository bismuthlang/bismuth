extern func printf(str s, ...) : int;

define enum lambdaOp {
    str, int -> str,
    str -> str
}


define enum a {
    int, 
    boolean,
    str,
    lambdaOp,
    (str, int -> str + str -> str)
}

define program :: c : Channel<-int> = {
    var fn := (str msg, int times) : str {
        while times > 0 {
            printf("msg=%s\n", msg);
            times := times -1; 
        }
        return msg; 
    };



    var t2 := fn;

    lambdaOp op := fn; 
    # VS (str, int -> str + str -> str). Now, we need a way to make the two equivalent....
    
    match op {
        str, int -> str fn => fn("Hello", 2);
        str -> str fn => fn("Goodbye");
    }


    a obscured := op; 

    match obscured {
        int i => printf("Integer: %u\n", i);
        boolean b => if b { printf("Boolean: true\n"); } else { printf("Boolean: false\n"); }
        str s => printf("String: %s\n", s);
        (str, int -> str + str -> str) s => printf("Got regular sum!\n");
        lambdaOp s => {
            match s {
                str, int -> str fn => fn("Repeat 2 times!", 2);
                str -> str fn => fn("Plain old print!");
            }
        }
    }

    (str, int -> str + str -> str) op2 := fn; 
    (str, int -> str + str -> str) op3 := op2; 


    (str + int) AAAA1 := 10; 
    (str + int) AAAA2 := AAAA1; 


    op := op2; 

    # return 0; 
    c.send(0)
}