extern int func printf(str s, ...);

define struct RGBData {
    int r; 
}

define struct HSVData {
    int h; 
}

define struct RGBColor {
    RGBData rgb; 
}

define struct HSVColor {
    HSVData hsv; 
}

define enum ColorType {
    RGBColor, 
    HSVColor
}

define struct Color {
    ColorType colorType; 
}

Color func getRGBColor(int r) 
{
    RGBData rgbDat := RGBData::init(r);

    ColorType ct := RGBColor::init(rgbDat); 
    var c := Color::init(
        # ct
        RGBColor::init(
            rgbDat
        )
    );

    # ColorType v := RGBColor::init(
    #         rgbDat, 
    #         (RGBData d) : int { return d.r; }
    #     );

    
    match c.colorType {
        RGBColor rgb => {
            printf("DEBUG=%u\n", 0);
            # RGBData -> int getRed := rgb.getRed; 
            # printf("r=%u]\n", getRed(rgb.rgb));
            printf("r=%u]\n", rgb.rgb.r);
        }
        HSVColor hsv => { # TODO: THESE BLOCKS CAN BE EMPTY?
            printf("hsv\n");
        }
    }

    return c;
}


int func program() {
    getRGBColor(128);
    return 0; 
}