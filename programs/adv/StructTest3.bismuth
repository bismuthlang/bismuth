extern func printf(str s, ...) -> int;

struct RGBData {
    int[3] rgb; 
}

struct HSVData {
    int[3] hsv; 
}

struct RGBColor {
    RGBData rgb; 
    RGBData -> int getRed; 
    RGBData -> int getGreen; 
    RGBData -> int getBlue;     
}

struct HSVColor {
    HSVData hsv; 
    HSVData -> int getHue; 
    HSVData -> int getSat; 
    HSVData -> int getVal;
}

enum ColorType {
    RGBColor, 
    HSVColor
}

struct Color {
    ColorType colorType; 
    ColorType -> str toString; 
}

# Color func getRGBColor(int r, int g, int b) 
prog getRGBColor :: io : +int;+int;+int;-Color = # Note: Meaning of params gets lost...
{
    int[3] data; 
    data[0] := io.recv();# r; 
    data[1] := io.recv();# g; 
    data[2] := io.recv();# b; 

    RGBData rgbDat := RGBData::init(data);

    prog getChannel :: c : +RGBData;+int;-int = {
        RGBData d := c.recv();
        int[3] channels := d.rgb; 
        
        match channels[c.recv()]
            | Unit u => c.send(-1);
            | int i => c.send(i); 
    }

    var c := Color::init(
        RGBColor::init(
            rgbDat, 
            (RGBData d) -> int { 
                Channel<-RGBData;-int;+int> io := exec getChannel; 
                io.send(d)
                io.send(0)
                return io.recv();
            },
            (RGBData d) -> int { 
                Channel<-RGBData;-int;+int> io := exec getChannel; 
                io.send(d)
                io.send(1)
                return io.recv(); 
            },
            (RGBData d) -> int { 
                Channel<-RGBData;-int;+int> io := exec getChannel; 
                io.send(d)
                io.send(2)
                return io.recv();
            }
        ),
        (ColorType c) -> str { return "rgb"; }
    );
 
    {
        Channel<-Color> io := exec lamePrint; 
        io.send(c)
    }

    io.send(Color::init(
        RGBColor::init(
            rgbDat, 
            (RGBData d) -> int { 
                Channel<-RGBData;-int;+int> io := exec getChannel; 
                io.send(d)
                io.send(0)
                return io.recv(); 
                # return getChannel(d, 0); 
            },
            (RGBData d) -> int { 
                Channel<-RGBData;-int;+int> io := exec getChannel; 
                io.send(d)
                io.send(1)
                return io.recv();
                # return getChannel(d, 1); 
            },
            (RGBData d) -> int { 
                Channel<-RGBData;-int;+int> io := exec getChannel; 
                io.send(d)
                io.send(2)
                return io.recv(); 
            }
        ),
        (ColorType c) -> str { return "rgb"; }
    ))
}


prog lamePrint :: io : +Color = {
    Color c := io.recv(); 

    {
        ColorType -> str lam := c.toString;
        printf("Color[type=%s, ", lam(c.colorType));
    }

    printf("112\n");

    {
        match c.colorType {
            RGBColor rgb => {
                RGBData -> int getRed := rgb.getRed; 
                RGBData -> int getGreen := rgb.getGreen; 
                RGBData -> int getBlue := rgb.getBlue;

                # TODO: DEADCODE IF BLOCKS ARE ALL ASSIGNMENTS? DO BETTER OPT!
                printf("r=%u, g=%u, b=%u]\n", getRed(rgb.rgb), getBlue(rgb.rgb), getGreen(rgb.rgb));
            }
            HSVColor hsv => {
                HSVData -> int getHue := hsv.getHue; 
                HSVData -> int getSat := hsv.getSat; 
                HSVData -> int getVal := hsv.getVal;

                printf("r=%u, g=%u, b=%u]\n", getHue(hsv.hsv), getSat(hsv.hsv), getVal(hsv.hsv));
            }
        }
    }
    printf("133\n");
    # return 0;
}
prog program :: c : -int = {

    HSVColor hsv; 
    RGBColor rgb; 

    Channel<-int;-int;-int;+Color> io := exec getRGBColor; 
    io.send(58)
    io.send(166)
    io.send(63)

    Color col := io.recv();

    Channel<-Color> io2 := exec lamePrint;
    io2.send(col)

    c.send(0)
}