extern func printf(str s, ...) -> int; 

struct RGBData {
    int r; 
}

struct HSVData {
    int h; 
}

struct RGBColor {
    RGBData rgb; 
}

struct HSVColor {
    HSVData hsv; 
}

enum ColorType {
    RGBColor, 
    HSVColor
}

struct Color {
    ColorType colorType; 
}

# Color func getRGBColor(int r) 
prog getRGBColor :: io : +int;-Color = {
    int r := io.recv();

    RGBData rgbDat := RGBData::init(r);

    ColorType ct := RGBColor::init(rgbDat); 
    var c := Color::init(
        RGBColor::init(
            rgbDat
        )
    );
    
    match c.colorType {
        RGBColor rgb => {
            printf("DEBUG=%u\n", 0);
            printf("r=%u]\n", rgb.rgb.r);
        }
        HSVColor hsv => {
            printf("hsv\n");
        }
    }

    # return c;
    io.send(c)
}


prog program :: c : -int = {
    # getRGBColor(128);
    Channel<-int;+Color> chan := exec getRGBColor;

    chan.send(128)

    Color t := chan.recv();

    # return 0; 
    c.send(0)
}