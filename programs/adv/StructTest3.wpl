extern int func printf(str s, ...);

define struct Unit {}

define struct RGBData {
    int[3] rgb; 
}

define struct HSVData {
    int[3] hsv; 
}

define struct RGBColor {
    RGBData rgb; 
    RGBData -> int getRed; 
    RGBData -> int getGreen; 
    RGBData -> int getBlue; 
}

define struct HSVColor {
    HSVData hsv; 
    HSVData -> int getHue; 
    HSVData -> int getSat; 
    HSVData -> int getVal;
}

define enum ColorType { # FIXME: TEST THESE WITH ANON. ENUMS
    RGBColor, 
    HSVColor
}

define struct Color {
    ColorType colorType; 
    ColorType -> str toString; 
}

Color func getRGBColor(int r, int g, int b) 
{
    int[3] data; 
    data[0] := r; 
    data[1] := g; 
    data[2] := b; 

    RGBData rgbDat := RGBData::init(data);

    int func getChannel(RGBData d, int c) {
        int[3] channels := d.rgb; 
        return channels[c]; 
    }

    var c := Color::init(
        RGBColor::init(
            rgbDat, 
            (RGBData d) : int { return getChannel(d, 0); },
            (RGBData d) : int { return getChannel(d, 1); },
            (RGBData d) : int { return getChannel(d, 2); }
        ),
        (ColorType c) : str { return "rgb"; }
    );

    lamePrint(c); 

    return Color::init(
        RGBColor::init(
            rgbDat, 
            (RGBData d) : int { return getChannel(d, 0); },
            (RGBData d) : int { return getChannel(d, 1); },
            (RGBData d) : int { return getChannel(d, 2); }
        ),
        (ColorType c) : str { return "rgb"; }
    );
}


int func lamePrint(Color c) {
    {
        ColorType -> str lam := c.toString;
        printf("Color[type=%s, ", lam(c.colorType));
    }

    printf("112\n");

    {
        match c.colorType {
            RGBColor rgb => {
                RGBData -> int getRed := rgb.getRed; 
                RGBData -> int getGreen := rgb.getGreen; 
                RGBData -> int getBlue := rgb.getBlue;

                # TODO: DEADCODE IF BLOCKS ARE ALL ASSIGNMENTS? DO BETTER OPT!
                printf("r=%u, g=%u, b=%u]\n", getRed(rgb.rgb), getBlue(rgb.rgb), getGreen(rgb.rgb));
            }
            HSVColor hsv => {
                HSVData -> int getHue := hsv.getHue; 
                HSVData -> int getSat := hsv.getSat; 
                HSVData -> int getVal := hsv.getVal;

                printf("r=%u, g=%u, b=%u]\n", getHue(hsv.hsv), getSat(hsv.hsv), getVal(hsv.hsv));
            }
        }
    }
    printf("133\n");
    return 0;
}
define program :: c : Channel<-int> = {

    HSVColor hsv; 
    RGBColor rgb; 

    #Color z := getColor(58, 166, 63);

    #printf("Color: %u, %u, %u\n", z.red, z.green, z.blue);

    Color col := getRGBColor(58, 166, 63);

    lamePrint(col); 


    return 0; 
}