extern func printf(str s, ...) -> int; 

prog foo :: c : +Channel<ExternalChoice<+int, +boolean>;-str>;+Channel<InternalChoice<-int, -boolean>> {
    Channel<ExternalChoice<+int, + boolean>;-str> a := c.recv(); 
    Channel<InternalChoice<-int, -boolean>> b := c.recv(); 

    offer a 
        | +int => {
                b[-int]
                b.send(a.recv())
                printf("int (incorrect)\n");
            }
        | +boolean => {
                b[-boolean]
                b.send(a.recv())
                printf("bool (correct)\n");
            }

    a.send("5")
}

prog bar1 :: c : InternalChoice<-int, -boolean>;+str {
    c[-boolean]
    c.send(false)
    var xyz := c.recv(); 
}

prog bar2 :: c : ExternalChoice<+boolean, +int> {
    c.case(
        +boolean => {
            boolean b := c.recv(); 
        }
        +int => {
            int i := c.recv(); 
        }
    )
}

prog program :: c : -int {
    Channel<ExternalChoice<+int, +boolean>;-str> l1 := exec bar1; 
    Channel<InternalChoice<-int, -boolean>> l2 := exec bar2; 

    Channel<-Channel<ExternalChoice<+int, +boolean>;-str>;-Channel<InternalChoice<-int, -boolean>>> linker := exec foo; 
    linker.send(l1)
    linker.send(l2)

    c.send(0)
}