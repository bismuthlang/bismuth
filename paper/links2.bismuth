extern func printf(str s, ...) -> int; 

func linkRecvInt (Channel<+int> a, Channel<-int> b) { 
    b.send(a.recv())
    return;
}

func linkRecvBool (Channel<+boolean> a, Channel<-boolean> b) {
    b.send(a.recv())
    return; 
}

prog foo :: c : +Channel<ExternalChoice<+int, +boolean>>;+Channel<InternalChoice<-int, -boolean>> {
    Channel<ExternalChoice<+int, + boolean>> a := c.recv(); 
    Channel<InternalChoice<-int, -boolean>> b := c.recv(); 
    
    offer a 
        | +int => {
                b[-int]
                linkRecvInt(a, b)
                printf("int (incorrect)\n");
            }
        | +boolean => {
                b[-boolean]
                # b.send(false)
                linkRecvBool(a, b)
                printf("bool (correct)\n");
            }
}

prog bar1 :: c : InternalChoice<-int, -boolean> {
    c[-boolean]
    c.send(false)
}

prog bar2 :: c : ExternalChoice<+boolean, +int> {
    c.case(
        +boolean => {
            boolean b := c.recv(); 
        }
        +int => {
            int i := c.recv(); 
        }
    )
}

prog program :: c : -int {
    Channel<ExternalChoice<+int, +boolean>> l1 := exec bar1; 
    Channel<InternalChoice<-int, -boolean>> l2 := exec bar2; 

    Channel<-Channel<ExternalChoice<+int, +boolean>>;-Channel<InternalChoice<-int, -boolean>>> linker := exec foo; 
    linker.send(l1)
    linker.send(l2)

    c.send(0)
}